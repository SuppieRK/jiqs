import java.nio.charset.StandardCharsets

plugins {
	// https://docs.gradle.org/current/userguide/idea_plugin.html
	id 'idea'

	// https://docs.gradle.org/current/userguide/java_plugin.html
	id 'java'

	// https://plugins.gradle.org/plugin/io.github.suppierk.jooq-java-class-generator
	id 'io.github.suppierk.jooq-java-class-generator' version "$jooqJavaClassGeneratorVersion"

	// https://plugins.gradle.org/plugin/com.diffplug.spotless
	id 'com.diffplug.spotless' version "$spotlessVersion"

	// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	id 'jacoco'

	// https://plugins.gradle.org/plugin/com.google.cloud.tools.jib
	id 'com.google.cloud.tools.jib' version "$jibVersion"
}

repositories {
	mavenCentral()
}

dependencies {
	// ===============================
	// ===== COMMON DEPENDENCIES =====
	// ===============================

	// https://mvnrepository.com/artifact/io.javalin/javalin-bundle
	implementation group: 'io.javalin', name: 'javalin-bundle', version: javalinVersion

	// https://mvnrepository.com/artifact/io.javalin.community.openapi/javalin-openapi-plugin
	implementation group: 'io.javalin.community.openapi', name: 'javalin-openapi-plugin', version: javalinVersion

	// https://mvnrepository.com/artifact/io.javalin.community.openapi/openapi-annotation-processor
	annotationProcessor group: 'io.javalin.community.openapi', name: 'openapi-annotation-processor', version: javalinVersion

	// https://mvnrepository.com/artifact/io.javalin.community.openapi/javalin-swagger-plugin
	implementation group: 'io.javalin.community.openapi', name: 'javalin-swagger-plugin', version: javalinVersion

	// https://mvnrepository.com/artifact/io.github.suppierk/inject
	implementation group: 'io.github.suppierk', name: 'inject', version: injectVersion

	// https://mvnrepository.com/artifact/com.github.gestalt-config/gestalt-core
	implementation group: 'com.github.gestalt-config', name: 'gestalt-core', version: gestaltVersion

	// https://mvnrepository.com/artifact/com.zaxxer/HikariCP
	implementation group: 'com.zaxxer', name: 'HikariCP', version: hikariVersion

	// https://mvnrepository.com/artifact/org.jooq/jooq
	implementation group: 'org.jooq', name: 'jooq', version: jooqVersion

	// https://mvnrepository.com/artifact/org.flywaydb/flyway-core
	implementation group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion

	// =====================================
	// ===== PREFERENTIAL DEPENDENCIES =====
	// =====================================

	// https://mvnrepository.com/artifact/com.github.gestalt-config/gestalt-yaml
	implementation group: 'com.github.gestalt-config', name: 'gestalt-yaml', version: gestaltVersion

	// https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql
	implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: flywayVersion

	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	implementation group: 'org.postgresql', name: 'postgresql', version: postgresVersion

	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	jooqGenerator group: 'org.postgresql', name: 'postgresql', version: postgresVersion

	// https://mvnrepository.com/artifact/com.github.f4b6a3/uuid-creator
	implementation group: 'com.github.f4b6a3', name: 'uuid-creator', version: uuidCreatorVersion

	// =============================
	// ===== TEST DEPENDENCIES =====
	// =============================

	// https://mvnrepository.com/artifact/org.junit/junit-bom
	testImplementation platform(group: 'org.junit', name: 'junit-bom', version: junitVersion)

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'

	// ==========================================
	// ===== PREFERENTIAL TEST DEPENDENCIES =====
	// ==========================================

	// https://mvnrepository.com/artifact/org.testcontainers/postgresql
	testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainersVersion

	// https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier-nodep
	testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier-nodep', version: equalsVerifierVersion
}

// Setup Flyway database migration
// https://documentation.red-gate.com/fd/gradle-task-184127407.html
flyway {
	driver = databaseDriverClassName
}

// Setup jOOQ code generation
// https://github.com/etiennestuder/gradle-jooq-plugin?tab=readme-ov-file#configuring-the-jooq-generation-tool
jooq {
	version = jooqVersion

	configurations {
		main {
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN

				generator {
					database {
						name = databaseJooqGeneratorClassName
					}

					generate {
						fluentSetters = true
					}

					target {
						packageName = databaseJooqGeneratedClassesPackageName
					}
				}
			}
		}
	}
}

java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion

	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion)
	}
}

// Enable Spotless code formatting rules
// https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
	java {
		target '**/*.java'

		// Aligns with Intellij IDEA default settings
		toggleOffOn('@formatter:off', '@formatter:on')

		googleJavaFormat()
	}

	groovyGradle {
		target '**/*.gradle'

		greclipse()
	}
}

test {
	dependsOn spotlessCheck
	finalizedBy jacocoTestReport

	useJUnitPlatform()
}

jacocoTestReport {
	// Tests are required to run before generating the report
	dependsOn test

	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "${databaseJooqGeneratedClassesPackageName.replace('.', '/')}/**")
		}))
	}
}

jib {
	from {
		image = "eclipse-temurin:$javaVersion-alpine"
	}
}

// Configure several tasks additionally for Gradle
tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = StandardCharsets.UTF_8.name()
}